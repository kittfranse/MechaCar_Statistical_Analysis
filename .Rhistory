?<name of function or object>
install.packages("tidyverse")
install.packages("jsonlite")
clear()
setwd("~/Analysis_Projects/MechaCar_Statistical_Analysis")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
?read.csv()
source("~/Analysis_Projects/MechaCar_Statistical_Analysis/MechaCarChallenge.R", echo=TRUE)
MC_mpg <- read.csv(file = "MechaCar_mpg.csv", check.names = F, stringsAsFactors = F)
View(MC_mpg)
View(MC_mpg)
?lm()
plt <- ggplot(vehicle_length)
plt + geom_point()
# Plot - looking at the data
plt <- ggplot(vehicle_length)
library(tidyverse)
library(dplyr)
library(ggplot2)
plt <- ggplot(vehicle_length)
plt + geom_point()
plt <- ggplot(MC_mpg)
plt + geom_point()
# Plot - looking at the data
plt <- ggplot(MC_mpg, aes(x = vehicle_length))
plt + geom_point()
# Plot - looking at the data
plt <- ggplot(MC_mpg, aes(x = displ, y = vehicle_length))
plt + geom_point()
# Plot - looking at the data
plt <- ggplot(MC_mpg, aes(x = ehicle_weight, y = vehicle_length))
plt + geom_point()
# Plot - looking at the data
plt <- ggplot(MC_mpg, aes(x = vehicle_weight, y = vehicle_length))
plt + geom_point()
# Linear Regression - Single and Multiple
lm(vehicle_weight ~ vehicle_length, MC_mpg) #create linear model
summary(lm(qsec~hp, MC_mpg)) #summarize linear model
summary(lm(vehicle_weight ~ vehicle_length, MC_mpg)) #summarize linear model
plt + geom_point() + geom_smooth(lm, se = FALSE)
plt <- ggplot(MC_mpg, aes(x = vehicle_weight, y = vehicle_length))
plt + geom_point() + geom_smooth(lm, se = FALSE)
plt <- ggplot(MC_mpg, aes(x = vehicle_weight, y = vehicle_length))
plt + geom_point() + geom_smooth(lm(vehicle_weight ~ vehicle_length, MC_mpg), se = FALSE)
plt + geom_point()
model <- lm(vehicle_weight ~ vehicle_length, MC_mpg) #create linear model
yvals <- model$coefficients['vehicle_length']*MC_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(MC_mpg ,aes(x = vehicle_weight, y = vehicle_length)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(vehicle_weight ~ vehicle_length, MC_mpg) #create linear model
summary(lm(vehicle_weight ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD + mpg, MC_mpg)) #summarize linear model
lm(vehicle_weight ~ vehicle_length, MC_mpg) #create linear model
summary(lm(vehicle_weight ~ vehicle_length + spoiler_angle +
ground_clearance + AWD + mpg, MC_mpg)) #summarize linear model
lm(vehicle_weight ~ vehicle_length + spoiler_angle +
ground_clearance + AWD + mpg, MC_mpg)) #create linear model
summary(lm(vehicle_weight ~ vehicle_length + spoiler_angle +
ground_clearance + AWD + mpg, MC_mpg)) #summarize linear model
model <- lm(AWD ~ mpg, MC_mpg) #create linear model
yvals <- model$coefficients['mpg']*MC_mpg$mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(MC_mpg ,aes(x = mpf, y = AWD)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
model <- lm(AWD ~ mpg, MC_mpg) #create linear model
yvals <- model$coefficients['mpg']*MC_mpg$mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(MC_mpg ,aes(x = mpg, y = AWD)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
model <- lm(vehicle_weight ~ mpg, MC_mpg) #create linear model
yvals <- model$coefficients['mpg']*MC_mpg$mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(MC_mpg ,aes(x = mpg, y = vehicle_weight)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
MC_mpg <- read.csv(file = "MechaCar_mpg.csv", check.names = F, stringsAsFactors = F) #read in CSV
# Plot - looking at the data
plt <- ggplot(MC_mpg, aes(x = vehicle_weight, y = vehicle_length))
plt + geom_point()
# Linear Regression - Single Multiple
lm(vehicle_weight ~ vehicle_length + spoiler_angle +
ground_clearance + AWD + mpg, MC_mpg) #create linear model
summary(lm(vehicle_weight ~ vehicle_length + spoiler_angle +
ground_clearance + AWD + mpg, MC_mpg)) #summarize linear model
MC_mpg <- read.csv(file = "MechaCar_mpg.csv", check.names = F, stringsAsFactors = F) #read in CSV
# Plot - looking at the data
plt <- ggplot(MC_mpg, aes(x = ground_clearance, y = mpg))
plt + geom_point()
# Linear Regression - Single Multiple
lm(mpg ~ vehicle_weight + vehicle_length + spoiler_angle +
ground_clearance + AWD, MC_mpg) #create linear model
summary(lm(mpg ~ vehicle_weight + vehicle_length + spoiler_angle +
ground_clearance + AWD, MC_mpg)) #summarize linear model
source("~/Analysis_Projects/MechaCar_Statistical_Analysis/MechaCarChallenge.R")
S_coil <- read.csv(file = "Suspension_Coil.csv", check.names = F, stringsAsFactors = F) #read in CSV
View(S_coil)
View(S_coil)
s_coil <- read.csv(file = "Suspension_Coil.csv", check.names = F, stringsAsFactors = F) #read in CSV
View(S_coil)
View(S_coil)
View(s_coil)
View(s_coil)
total_summary <- s_coil %>% summarize(Mean = mean(PSI), Median = median(PSI),
Variance = var(PSI), SD = sd(PSI))
total_summary
lot_summary <- s_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI), Median = median(PSI),
Variance = var(PSI), SD = sd(PSI))
lot_summary
View(lot_summary)
View(lot_summary)
View(lot_summary)
View(lot_summary)
View(total_summary)
t.test(s_coil$PSI, mu = 1500)
# Create a subset for each lot
lot1 <- subset(s_coil, Manufactoring_Lot == "Lot1")
lot2 <- subset(s_coil, Manufactoring_Lot == "Lot2")
lot3 <- subset(s_coil, Manufactoring_Lot == "Lot3")
# Run t-test on subsets
t.test(lot1$PSI, mu = 1500)
t.test(lot2$PSI, mu = 1500)
t.test(lot3$PSI, mu = 1500)
# Create a subset for each lot
lot1 <- subset(s_coil, Manufacturing_Lot == "Lot1")
lot2 <- subset(s_coil, Manufacturing_Lot == "Lot2")
lot3 <- subset(s_coil, Manufacturing_Lot == "Lot3")
# Run t-test on subsets
t.test(lot1$PSI, mu = 1500)
t.test(lot2$PSI, mu = 1500)
t.test(lot3$PSI, mu = 1500)
View(total_summary)
